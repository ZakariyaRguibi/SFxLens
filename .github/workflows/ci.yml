# Unique name for this workflow
name: SFxLens CI Pipeline

# Definition when the workflow should run
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "sfdx-project.json"
      - "README.md"
      - "**.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"

# Jobs to be executed
jobs:
  format-lint-lwc-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4
        with:
          # Checkout with token to allow committing back to the repository
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup environment directly (instead of composite action)
      - name: "Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: "Set up Java for Apex formatting"
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      # Set up Python 3.10 or later for Flowtest engine
      - name: "Set up Python for Flowtest engine"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Verify Python installation
      - name: "Verify Python installation"
        run: |
          python --version
          pip --version

      # Cache node_modules to speed up the process
      - name: "Cache node_modules"
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-

      # Install npm dependencies
      - name: "Install npm dependencies"
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: HUSKY=0 npm ci

      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          npm install @salesforce/cli --location=global
          sf --version

      # Install Code Analyzer v5 (Beta) plugin
      - name: "Install Salesforce CLI Code Analyzer v5 plugin"
        run: sf plugins install code-analyzer

      # Set up Code Analyzer configuration
      - name: "Configure Code Analyzer"
        run: |
          # Create config directory if it doesn't exist
          mkdir -p ./.sf/config
          # Create configuration file for Code Analyzer
          cat > ./.sf/config/code-analyzer.yml << EOF
          engines:
            eslint:
              disable_engine: false
            pmd:
              disable_engine: false
            cpd:
              disable_engine: false
            retire-js:
              disable_engine: false
            flowtest:
              disable_engine: false
            sfge:
              disable_engine: false
            regex:
              disable_engine: false
          EOF

      # Auto-format code with Prettier
      - name: "Auto-format code with Prettier"
        run: npm run prettier

      # Commit Prettier formatting changes (only on pull requests)
      - name: "Commit Prettier formatting changes"
        if: github.event_name == 'pull_request'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: apply prettier formatting"
          commit_user_name: "GitHub Actions"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions <actions@github.com>"
          push_options: "--force"
          token: ${{ secrets.GITHUB_TOKEN }}

      # Run Code Analyzer v5 using CLI
      - name: "Run Code Analyzer v5"
        id: run-code-analyzer
        run: |
          mkdir -p ./code-analyzer-results

          # Generate only HTML report for easy reading in browser
          sf code-analyzer run \
            --workspace "force-app/**" \
            --output-file ./code-analyzer-results/report.html \
            --view detail
          echo "Analysis complete. HTML report saved to ./code-analyzer-results/report.html"

      # Check for Code Analyzer critical or high severity violations
      - name: "Check for Code Analyzer critical or high severity violations"
        run: |
          if grep -q "\"severity\":\"1\"" ./code-analyzer-results/results.json || grep -q "\"severity\":\"2\"" ./code-analyzer-results/results.json; then
            echo "⚠️ One or more Code Analyzer critical (1) or high (2) severity violations found"
            sf code-analyzer run \
              --workspace "force-app/**" \
              --rule-selector "Security,Performance,Best Practices" \
              --severity-threshold 2 \
              --view detail
            exit 1
          else
            echo "✅ No critical or high severity violations found"
          fi

      # Upload Code Analyzer results
      - name: "Upload Code Analyzer results"
        uses: actions/upload-artifact@v4.6.2
        with:
          name: code-analyzer-results
          path: ./code-analyzer-results/
          retention-days: 14
          if-no-files-found: warn

      # LWC unit tests
      - name: "Unit test Lightning Web Components"
        run: npm run test:unit:coverage
        continue-on-error: true

      # # Upload code coverage data
      # - name: "Upload code coverage for LWC to Codecov.io"
      #   uses: codecov/codecov-action@v4
      #   with:
      #     flags: LWC
      #   continue-on-error: true

  scratch-org-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: format-lint-lwc-tests
    if: github.actor != 'dependabot[bot]'
    steps:
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Setup environment directly
      - name: "Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Cache node_modules to speed up the process
      - name: "Cache node_modules"
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-

      # Install npm dependencies
      - name: "Install npm dependencies"
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: HUSKY=0 npm ci

      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          npm install @salesforce/cli --location=global
          sf --version

      # Store secret for dev hub
      - name: "Populate auth file with DEVHUB_SFDX_URL secret"
        shell: bash
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
          secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

      # Create scratch org
      - name: "Create scratch org"
        run: sf org create scratch -f config/project-scratch-def.json -a sfxlens-scratch -d -y 1

      # Deploy source to scratch org
      - name: "Deploy source to scratch org"
        run: sf project deploy start

      # Assign permission set
      - name: "Assign permission set to default user"
        run: sf org assign permset -n SFxLens_Metadata_Access

      # Run Apex tests
      - name: "Run Apex tests"
        run: sf apex test run -c -r human -d ./tests/apex -w 20

      # Upload code coverage data
      - name: "Upload code coverage for Apex to Codecov.io"
        uses: codecov/codecov-action@v4
        with:
          flags: Apex
        continue-on-error: true

      # Housekeeping
      - name: "Delete scratch org"
        if: always()
        run: sf org delete scratch -p -o sfxlens-scratch

  generate-apexdocs:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Setup environment
      - name: "Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Install ApexDocs package
      - name: "Install ApexDocs"
        run: npm install -g @cparra/apexdocs

      # Install VitePress
      - name: "Install VitePress"
        run: npm add -D vitepress

      # Create output directory
      - name: "Create output directory"
        run: mkdir -p ./apexdocs-output

      # Setup VitePress docs structure
      - name: "Setup VitePress docs structure"
        run: |
          # Create VitePress config directory
          mkdir -p ./apexdocs-output/.vitepress

          # Create a dynamic VitePress config with correct base URL
          cat > ./apexdocs-output/.vitepress/config.js << 'EOF'
          export default {
            title: 'SFxLens API Documentation',
            description: 'Apex documentation for the SFxLens project',
            base: '/SFxLens/', // Set base to match the GitHub Pages repository name
            themeConfig: {
              nav: [
                { text: 'Home', link: '/' },
                { text: 'API Reference', link: '/markdown/' },
                { text: 'Changelog', link: '/changelog/changelog' },
                { text: 'Code Analyzer', link: '/code-analyzer/report.html' },
              ],
              sidebar: {
                '/markdown/': [
                  {
                    text: 'API Documentation',
                    items: [
                      { text: 'Index', link: '/markdown/' }
                    ]
                  }
                ]
              },
              socialLinks: [
                { icon: 'github', link: 'https://github.com/ZakariyaRguibi/SFxLens' }
              ],
              footer: {
                message: 'Generated with ApexDocs and VitePress',
                copyright: 'Copyright © SFxLens Project'
              }
            }
          }
          EOF

          # Copy index page from template
          cp ./.github/templates/vitepress-index.md ./apexdocs-output/index.md

      # Generate documentation
      - name: "Generate ApexDocs documentation"
        run: |
          # Create separate folders for different doc types
          mkdir -p ./apexdocs-output/markdown
          mkdir -p ./apexdocs-output/openapi
          mkdir -p ./apexdocs-output/changelog
          mkdir -p ./apexdocs-output/code-analyzer
          mkdir -p ./temp-previous-version

          # Get previous commit code for changelog generation
          if [ "$(git rev-list --count HEAD)" -gt 1 ]; then
            # Get the previous commit and extract relevant Apex files
            git checkout HEAD~1 -- force-app/
            cp -r force-app/ ./temp-previous-version/
            git checkout HEAD -- force-app/
            
            # Generate changelog comparing previous commit to current
            apexdocs changelog \
              --previousVersionDir ./temp-previous-version \
              --currentVersionDir force-app/ \
              --targetDir ./apexdocs-output/changelog \
              --fileName "changelog" \
              --scope global public private protected 
          else
            # If this is the first commit, create a placeholder
            echo "# Changelog\n\nInitial version - no changes to report." > ./apexdocs-output/changelog/changelog.md
          fi

          # Generate Markdown documentation for Apex classes
          apexdocs markdown --sourceDir force-app/ \
            --targetDir ./apexdocs-output/markdown \
            --scope global public private protected \
            --sortAlphabetically true \
            --includeMetadata true

          # Generate OpenAPI spec for any REST resources
          apexdocs openapi --sourceDir force-app/ \
            --targetDir ./apexdocs-output/openapi \
            --fileName "sfxlens-api" \
            --title "SFxLens REST API" \
            --apiVersion "1.0.0"
          
          # Move OpenAPI spec to public directory for access via VitePress
          mkdir -p ./apexdocs-output/public
          cp ./apexdocs-output/openapi/sfxlens-api.json ./apexdocs-output/public/

          # Create an OpenAPI page
          cat > ./apexdocs-output/openapi.md << 'EOF'
          # OpenAPI Specification

          The SFxLens REST API is documented using the OpenAPI specification.

          [Download OpenAPI Specification](/sfxlens-api.json)
          EOF
          
          # Create Code Analyzer page that will link directly to the report
          cat > ./apexdocs-output/code-analyzer.md << 'EOF'
          # Code Analyzer Results

          This page provides access to the results of the most recent code analysis run.


          The code analysis report provides insights into code quality, security, and best practices compliance.
          EOF

      # Build VitePress site
      - name: "Build VitePress site"
        run: |
          cd ./apexdocs-output
          # Ensure correct base URL in the VitePress config
          grep -q "base: '/SFxLens/'" ./.vitepress/config.js || (
            echo "Error: base URL in VitePress config should be '/SFxLens/' for GitHub Pages"
            exit 1
          )
          # Build the site
          npx vitepress build
          # Verify built output
          ls -la ./.vitepress/dist/
          # Move the built site to a directory that will be uploaded as an artifact
          mkdir -p ../vitepress-site
          cp -r ./.vitepress/dist/* ../vitepress-site/

      # Upload both raw markdown and built VitePress site as artifacts
      - name: "Upload ApexDocs documentation"
        uses: actions/upload-artifact@v4.6.2
        with:
          name: apexdocs-output
          path: ./apexdocs-output

      - name: "Upload VitePress site"
        uses: actions/upload-artifact@v4.6.2
        with:
          name: vitepress-site
          path: ./vitepress-site

  deployment-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: scratch-org-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Setup environment directly
      - name: "Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Cache node_modules to speed up the process
      - name: "Cache node_modules"
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-

      # Install npm dependencies
      - name: "Install npm dependencies"
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: HUSKY=0 npm ci

      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          npm install @salesforce/cli --location=global
          sf --version

      # Store secret for dev hub
      - name: "Populate auth file with DEVHUB_SFDX_URL secret"
        shell: bash
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
          secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi

      # Authenticate dev hub
      - name: "Authenticate Dev Hub"
        run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

      # # Check for valid deployment to production
      # - name: "Check deployment to production"
      #   run: |
      #     sf project deploy validate -d force-app --verbose

      # Generate deployment report
      - name: "Generate deployment report"
        if: success()
        run: |
          echo "# Deployment Validation Report" > deployment_report.md
          echo "✅ Validation completed successfully on $(date)" >> deployment_report.md
          echo "Ready for deployment to production environments." >> deployment_report.md

      # Upload deployment report
      - name: "Upload deployment report"
        uses: actions/upload-artifact@v4.6.2
        with:
          name: deployment-report
          path: deployment_report.md

  publish-reports:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [format-lint-lwc-tests, deployment-validation, generate-apexdocs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Prepare directories
      - name: Prepare directories
        run: mkdir -p ./pages
      
      # Download VitePress site to the root of pages directory
      - name: Download VitePress site
        uses: actions/download-artifact@v4.1.4
        with:
          name: vitepress-site
          path: ./pages
        continue-on-error: true

      # Add error handling for artifact downloads
      - name: Download code analyzer results
        uses: actions/download-artifact@v4.1.4
        with:
          name: code-analyzer-results
          path: ./pages/code-analyzer
        continue-on-error: true

      # Make code analyzer results available as direct link rather than iframe
      - name: Veryfy code analyzer results
        run: |
          # Copy the HTML report to the public directory
          if [ -f "./pages/code-analyzer/report.html" ]; then
            echo "Code analyzer results imported"
          else 
            echo "Code analyzer results not found, creating placeholder"
            echo "<html><body><h1>Code Analysis Report</h1><p>No report available from the latest run.</p></body></html>" > ./pages/code-analyzer/report.html
          fi

      - name: Download deployment report
        uses: actions/download-artifact@v4.1.4
        with:
          name: deployment-report
          path: ./pages/deployment-report
        continue-on-error: true

      # Add fallback for missing artifacts
      - name: Check for missing artifacts
        run: |
          if [ ! -d "./pages" ] || [ -z "$(ls -A "./pages" 2>/dev/null)" ]; then
            echo "Main pages directory is empty or missing, creating placeholder"
            mkdir -p "./pages"
            echo "<html><body><h1>Documentation not available</h1><p>The documentation was not generated in the latest run.</p></body></html>" > "./pages/index.html"
          fi

      # GitHub Pages deployment
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
